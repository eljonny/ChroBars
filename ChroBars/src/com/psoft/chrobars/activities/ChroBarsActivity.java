package com.psoft.chrobars.activities;

import android.app.Activity;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.Menu;
import android.view.MenuItem;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ViewSwitcher;

import com.psoft.chrobars.R;
import com.psoft.chrobars.data.ChroConstructionParams;
import com.psoft.chrobars.data.ChroData;
import com.psoft.chrobars.loading.ChroLoad;
import com.psoft.chrobars.opengl.ChroSurface;
import com.psoft.chrobars.settings.ChroBarsSettings;
import com.psoft.chrobars.threading.construction.ChroConstructionThread;
import com.psoft.chrobars.threading.construction.ChroPostStartLoadThread;
import com.psoft.chrobars.util.ChroPrint;
import com.psoft.chrobars.util.ChroUtilities;

/**
 * This is the main application Activity.
 *  It starts with a loading screen, then
 *  runs the main Time application mode. The 
 *  user can then switch between the other 
 *  application modes, Stopwatch and Timer.
 * 
 * @author jhyry
 */
public class ChroBarsActivity extends Activity {
	
	/**
	 * This is used by any class in the project 
	 *  that requires access to the screen parameters.
	 */
	private static DisplayMetrics screen;
	private static WindowManager wm;

	/**
	 * The ViewSwitcher displays the loading screen,
	 *  then changes to the ViewFlipper.
	 */
	private static ViewSwitcher loadToGL;
	
	/**
	 * This object stores the parameters that 
	 *  are used by the background startup thread
	 *  to build the necessary initial components 
	 *  for running the application.
	 */
	private static ChroConstructionParams params;
	
	/**
	 * This is the GLSurfaceView that runs the 
	 *  main Time application mode.
	 */
	private static ChroSurface kronos;
	
	/**
	 * This is the GLSurfaceView that runs the 
	 *  Stopwatch application mode.
	 */
	@SuppressWarnings("unused")
	private static ChroSurface archimedes;
	
	/**
	 * This is the GLSurfaceView that runs the 
	 *  timer application mode.
	 */
	@SuppressWarnings("unused")
	private static ChroSurface perseus;
	
	/**
	 * This stores the current instance of the main
	 *  application Activity. It is generally only 
	 *  used for obtaining the singleton instance of 
	 *  the ChroBarsSettings object.
	 */
	private static ChroBarsActivity instance;
	
	/**
	 * This stores the singleton object reference of 
	 *  the settings object.
	 */
	private static ChroBarsSettings settings;
	
	//Intents for starting the other Activities
	private Intent settingsIntent;
	private Intent aboutIntent;
	
	//For maintaining app startup progress
	private Integer startupProgress = 0;
	
	/**
	 * Build and set all the necessary data for 
	 *  running the application.
	 *  
	 *  @param savedInstanceState A Bundle containing any persistent state data.
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		
		//Send the bundled data to the superclass,
		// which includes any necessary information 
		// about the state of the previous instance.
		super.onCreate(savedInstanceState);

		wm = getWindowManager();
		setDisplayMetrics();
		
		//Remove the title bar if SDK version is below Honeycomb.
		//If it is 0xB or higher, we need the title for access to the ActionBar.
		if(Build.VERSION.SDK_INT < 0xB)
			requestWindowFeature(Window.FEATURE_NO_TITLE);
		
		setContentView(constructViewAnimator());
		buildIntents();
		constructBarsAndSurface();
	}

	/**
	 * This builds the ViewAnimators used to switch 
	 *  between the loading screen and the various 
	 *  ChroBars application modes.
	 */
	private ViewSwitcher constructViewAnimator() {
		//We use these ViewAnimators to manage the multiple views.
		loadToGL = new ViewSwitcher(this);
		loadToGL.setInAnimation(this, android.R.anim.fade_in);
		loadToGL.setOutAnimation(this, android.R.anim.fade_out);
		
		return setLoadingView();
	}

	/**
	 * This builds a DisplayMetrics object and 
	 *  sets its parameters to those of the current screen.
	 */
	private static DisplayMetrics setDisplayMetrics() {
		screen = new DisplayMetrics();
		wm.getDefaultDisplay().getMetrics(screen);
		return screen;
	}
	
	/**
	 * Used as an accessor for the current screen metrics.
	 * 
	 * @return A DisplayMetrics object generated by setDisplayMetrics.
	 */
	public static DisplayMetrics getDisplayMetrics() {
		return setDisplayMetrics();
	}

	/**
	 * This starts the background construction thread 
	 *  that builds the surface and bars data
	 */
	private void constructBarsAndSurface() {
		params = new ChroConstructionParams(this, kronos, settings);
		new ChroConstructionThread().execute(params);
	}

	/**
	 * This sets the current view to the loading screen
	 *  while the application loads the bars and 
	 *  surface/OpenGL data in the background.
	 *  
	 *  @return Returns the ViewSwitcher with the loading screen.
	 */
	private ViewSwitcher setLoadingView() {
		loadToGL.addView(new ChroLoad(this, null),0);
		return loadToGL;
	}

	/**
	 * This method constructs the intents for use with
	 *  starting new activities via the options menu selections.
	 */
	private void buildIntents() {
		
		settingsIntent = new Intent(this, ChroBarsSettingsActivity.class);
		aboutIntent = new Intent(this, ChroBarsAboutActivity.class);
		
		instance = this;
	}
	
	/**
	 * Ensures that the settings singleton can be regenerated.
	 */
	@Override
	public void onBackPressed() {
		super.onBackPressed();
		housekeeping();
		finish();
	}
	
	/**
	 * Makes sure that when the activity is destroyed, the settings instance is cleansed.
	 */
	@Override
	public void onDestroy() {
		super.onDestroy();
		housekeeping();
	}

	/**
	 * Perform standard exit cleaning routines.
	 */
	private void housekeeping() {
		ChroBarsSettings.clean();
		//This being left in memory is very common between
		// application runs, so set it back to default.
		ChroData._max_prog = ChroData._BASE_MAX_PROGRESS;
	}

	/**
	 * This overridden method inflates the options menu XML
	 *  which is then loaded in one of two ways:
	 *  - If the Android SDK is major version 11 or above,
	 *  	Android will load the options menu into the Action Bar.
	 *  - If the Android SDK major version is below 11, the
	 *  	options menu will inflate in the traditional manner.
	 *  
	 *  @param menu The Menu object into which the menu layout will be inflated.
	 *  @return Whether or not the Menu was populated with a successfully inflated layout.
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_chro_bars, menu);
		return true;
	}
	
	/**
	 * Switches over the item selection ID to figure out
	 * which activity to start or which mode to switch to.
	 * 
	 * @param item The menu item selected by the user.
	 * @return Whether or not the MenuItem was successfully processed.
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		
	    // Handle item selection
	    switch (item.getItemId()) {
	    
	        case R.id.menu_settings:
	        	startActivity(settingsIntent);
	            break;
	        case R.id.menu_about:
	        	startActivity(aboutIntent);
	            break;
	            
	        default:
	            return super.onOptionsItemSelected(item);
	    }
		
		return true;
	}
	
	/**
	 * The loading background task sets this during app loading.
	 * 
	 * @param progress The current background task progress.
	 */
	public void setProgressPercent(int progress) {
//		DEBUG
//		System.out.println("Setting progress to " + progress + "...");
		startupProgress = progress;
		
		//When the application loading is done,
		// we need to do these things.
		if(progress == ChroData._max_prog.shortValue()) {
//			DEBUG
//			System.out.println("Retrieving built objects...");
			settings = params.getSettings();
			kronos = params.getRenderSurface();
//			DEBUg
//			ChroPrint.println("Recieved textures " + params.getTextures() + "\nSize " + params.getTextures().size(), System.out);
			try {
				Thread.sleep(250);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			switchToBars();
			cacheAndLoadLateTextures();
		}
	}

	/**
	 * 
	 */
	private void cacheAndLoadLateTextures() {
		//Load textures we don't need yet in the background.
		ChroPrint.println("Starting background texture loading thread...", System.out);
		(new ChroPostStartLoadThread(params.getTextures(), ChroSurface.getRenderer())).start();
	}
	
	/**
	 * Accessor for the field holding the current progress of the loading thread.
	 * 
	 * @return The current startup progress as an integer.
	 */
	public int getProgress() {
		return startupProgress;
	}
	
	/**
	 * When the loading indicator is ready, this will be called 
	 *  by the construction thread to finalize the transition from 
	 *  the loading screen to the bars view.
	 */
	private void switchToBars() {
//		DEBUG
//		System.out.println("Adding GLSurfaceView...");
		loadToGL.addView(kronos, 1);
//		DEBUG
//		System.out.println("Showing bars...");
		loadToGL.showNext();
	}
	
	/**
	 * This allows other activities in the ChroBars activity package 
	 *  to obtain the settings instance object reference, if needed.
	 * 
	 * @param requester The object that is requesting an instance of the settings object instance.
	 * @return The ChroBarsSettings singleton, if the requester is allowed to access the singleton.
	 */
	protected static ChroBarsSettings requestSettingsObjectReference(Object requester)
									throws IllegalAccessException, NullPointerException {
		
		System.out.println(requester + " is requesting the settings object reference.");
		
		if(settings == null) {
			
			System.out.println("Settings object is null. Will try to get a new settings instance...");
			
			try {
				settings = ChroBarsSettings.getNewSettingsInstance(instance);
//				DEBUG
//				System.out.println("New settings instance retrieved: " + settings);
			}
			catch(Exception unknownEx) {
				
				ChroUtilities.printExDetails(unknownEx);
//				DEBUG
//				System.out.println("Trying to get existing settings instance...");
				settings = ChroBarsSettings.getInstance(instance);
				
				if(settings != null)
					System.out.println("Existing settings instance retrieved.");
				else
					throw new NullPointerException("Cannot continue. The settings object is null.");
			}
		}
//		DEBUG
//		System.out.println("Checking that requester is allowed to access settings object...");
//		System.out.println("Requester info: " + requester.getClass().getPackage());
		
		if(requester.getClass().getPackage().equals(ChroBarsActivity.class.getPackage())) {
//			DEBUG
//			System.out.println("Requester authenticated!");
			return settings;
		}
		else
			throw new RuntimeException(new IllegalAccessException(
				"Class not authorized to receive settings object reference."));
	}
}
